1.
#include<stdio.h>

void generate(int[],int);
void display(int[],int);
void merge_sort(int[],int,int);
void merge(int[],int,int,int);

int main()
{
	int arr[100],n;

	printf("\n Enter Array Limit : ");
	scanf("%d",&n);

	generate(arr,n);

	printf("\n\n Before Sorting : ");
	display(arr,n);

	merge_sort(arr,0,n-1);

	printf("\n\n After  Sorting : ");
	display(arr,n);

	getch();
	return 0;
}

void generate(int arr[],int n)
{
     	int i;
     
     	srand(time(0));
     
     	for(i=0;i<n;i++)
     	{
           		arr[i] = rand()%100;
     	}
}

void display(int arr[],int n)
{
	int i;

	for(i=0;i<n;i++)
	{
		printf(" %d ",arr[i]);
	}
}

void merge_sort(int arr[],int low,int high)
{
	int mid;

	if(low<high)
	{
		mid=(low+high)/2;

		merge_sort(arr,low,mid);
		merge_sort(arr,mid+1,high);

		merge(arr,low,mid,high);
	}
}

void merge(int arr[],int low,int mid,int high)
{
	int i,j,k,temp[100];

	i=low;
	j=mid+1;
	k=0;

	while(i<=mid && j<=high)
	{
		if(arr[i]<=arr[j])
		{
			temp[k]=arr[i];
			k++;
			i++;
		}
		else
		{
			temp[k]=arr[j];
			k++;
			j++;
		}
	}

	while(i<=mid)
	{
		temp[k]=arr[i];
		k++;
		i++;
	}

	while(j<=high)
	{
		temp[k]=arr[j];
		k++;
		j++;
	}

	for(i=low,k=0;i<=high;i++,k++)
	{
		arr[i]=temp[k];
	}
}
2.
#include <stdio.h>

// Structure to represent an item
struct Item 
{
    int value;
    int weight;
};

void sortItems(struct Item arr[], int n) 
{
    int i,j;
    struct Item temp;
    double r1,r2;

    for (i=1; i<n; i++) 
    {
        for (j=0; j<n-i; j++) 
        {
            r1 = (double)arr[j].value / arr[j].weight;
            r2 = (double)arr[j+1].value / arr[j+1].weight;

            if (r1 < r2) 
            {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

double fractionalKnapsack(int wt, struct Item arr[], int n) 
{
    int curWeight = 0, remain, i;
    double finalValue = 0.0;

    sortItems(arr, n);

    for (i=0; i<n; i++) 
    {
        if (curWeight + arr[i].weight <= wt) 
        {
            curWeight += arr[i].weight;
            finalValue += arr[i].value;
        } 
        else 
        {
            remain = wt - curWeight;
            finalValue += arr[i].value * ((double) remain / arr[i].weight);
            break;
        }
    }

    return finalValue;
}

int main() 
{
    int wt,n,i;
    struct Item arr[100];

	printf("\n Enter Knapsack Size : ");
	scanf("%d",&wt);

	printf("\n Enter No. of Items : ");
	scanf("%d",&n);

	printf("\n Enter %d Item Details : ",n);
	for(i=0;i<n;i++)
	{
		printf("\n Enter Value & Weight : ");
		scanf("%d%d",&arr[i].value,&arr[i].weight);
	}

    printf("\n Maximum value in Knapsack = %.2f\n", fractionalKnapsack(wt, arr, n));
    
    return 0;
}
