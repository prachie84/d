1.
#include <stdio.h>

int visited[10] = {0};

void dfs(int g[10][10], int n, int v) 
{
    int i;

    visited[v] = 1;
    printf("%d\t", v);  

    for (i = 0; i < n; i++) 
    {
        if (g[v][i] == 1 && visited[i] == 0) 
        {
            dfs(g, n, i);
        }
    }
}

int main() 
{
    int g[10][10], n, i, j, start;

    printf("\nEnter the number of nodes: ");
    scanf("%d", &n);

    printf("\nEnter the adjacency matrix:\n");
    for (i = 0; i < n; i++) 
    {
        for (j = 0; j < n; j++) 
        {
            scanf("%d", &g[i][j]);
        }
    }

    printf("\nEnter the starting node (0 to %d): ", n - 1);
    scanf("%d", &start);

    printf("\n DFS traversal: ");
    
	dfs(g, n, start);
	
    return 0;
}

2.
#include <stdio.h>

#define INF 9999
#define V 9

int minDistance(int dist[], int sptSet[])
{
	int min = INF, min_index, i;

	for (i=0;i<V;i++)
	{
		if (sptSet[i] == 0 && dist[i] <= min)
		{
			min = dist[i];
			min_index = i;
		}
	}
	
	return min_index;
}

int printSolution(int dist[], int n)
{
	int i;
	
	printf("\n Vertex Distance from Source : ");
	
	for(i=0;i<V;i++)
	{
		printf("\n %d \t %d", i, dist[i]);
	}
}

void dijkstra(int graph[V][V], int src)
{
	int dist[V],u,v,i,count; 
	int sptSet[V]; 
	
	for (i=0;i<V;i++)
	{
		dist[i] = INF;
		sptSet[i] = 0;
	}

	dist[src] = 0;

	for(count=0;count<V-1;count++) 
	{
		u = minDistance(dist, sptSet);

		sptSet[u] = 1;

		for (v=0;v<V;v++)
		{
			if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v])
			{
				dist[v] = dist[u] + graph[u][v];
			}
		}
	}

	printSolution(dist, V);
}

int main()
{
	int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
						{ 4, 0, 8, 0, 0, 0, 0, 11, 0 },
						{ 0, 8, 0, 7, 0, 4, 0, 0, 2 },
						{ 0, 0, 7, 0, 9, 14, 0, 0, 0 },
						{ 0, 0, 0, 9, 0, 10, 0, 0, 0 },
						{ 0, 0, 4, 14, 10, 0, 2, 0, 0 },
						{ 0, 0, 0, 0, 0, 2, 0, 1, 6 },
						{ 8, 11, 0, 0, 0, 0, 1, 0, 7 },
						{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } };

	dijkstra(graph, 0);

	return 0;
}
