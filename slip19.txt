1.
#include<stdio.h>
#include<stdlib.h>
 
int board[20],count;
 
void queen(int row,int n);

int main()
{
    int n,i,j;  
 
    printf(" - N Queens Problem Using Backtracking -");
    printf("\n\nEnter number of Queens:");
    scanf("%d",&n);

    queen(1,n);

    return 0;
}
 
//function for printing the solution
void print(int n)
{
    int i,j;
    printf("\n\nSolution %d:\n\n",++count);
    
    for(i=1;i<=n;++i)
    {
        printf("\t%d",i);
    }

    for(i=1;i<=n;i++)
    {
        printf("\n\n%d",i);
        for(j=1;j<=n;j++) 
        {
            if(board[i]==j)
            {
                printf("\t Q"); 
            }
            else
            {
                printf("\t -"); 
            }
        }
    }
}
 
int place(int row,int column)
{
    int i;
    for(i=1;i<=row-1;i++)
    {
        if(board[i]==column)
            return 0;
        else if(abs(board[i]-column)==abs(i-row))
            return 0;
    }
    
    return 1;
}
 
//function to check for proper positioning of queen
void queen(int row,int n)
{
    int column;
    for(column=1;column<=n;column++)
    {
        if(place(row,column))
        {
            board[row]=column; 
            
            if(row==n) 
                print(n); 
            else 
                queen(row+1,n);
        }
    }
}
2.
#include <stdio.h>

#define V 10  

int path[V];

int isSafe(int v, int graph[V][V], int path[], int pos, int n) 
{
    if (graph[path[pos - 1]][v] == 0)
        return 0;

    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return 0;

    return 1;
}

int hamiltonianCycleUtil(int graph[V][V], int path[], int pos, int n) 
{
    if (pos == n) 
    {
        if (graph[path[pos - 1]][path[0]] == 1)
            return 1;
        else
            return 0;
    }

    for (int v = 1; v < n; v++) {
        if (isSafe(v, graph, path, pos, n)) {
            path[pos] = v;

            if (hamiltonianCycleUtil(graph, path, pos + 1, n) == true)
                return 1;

            path[pos] = -1;
        }
    }

    return 0;
}

int hamiltonianCycle(int graph[V][V], int n) 
{
    for (int i = 0; i < n; i++)
        path[i] = -1;

    path[0] = 0;

    if (hamiltonianCycleUtil(graph, path, 1, n) == false) 
    {
        printf("\nNo Hamiltonian Cycle exists\n");
        return 0;
    }

    printf("\nHamiltonian Cycle found:\n");
    for (int i = 0; i < n; i++)
        printf("%d -> ", path[i]);
    printf("%d\n", path[0]);  
    return 1;
}

int main() 
{
    int graph[V][V], n;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (%dx%d):\n", n, n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    hamiltonianCycle(graph, n);

    return 0;
}
