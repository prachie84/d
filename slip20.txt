1.
#include<stdio.h>
#include<stdlib.h>

int main()
{
	int g[10][10],n,i,j,k,indeg[10]={0};

	printf("\n Enter No. of Vertex : ");
	scanf("%d",&n);
	
	printf("\n Enter the adjacency matrix of the graph : ");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&g[i][j]);
		}
	}
	
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			indeg[i]=indeg[i]+g[j][i];
		}
	}

	printf("\n Topological order is : ");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(indeg[j]==0)
			{
				printf(" %d ",j);
				indeg[j] = -1;
				
				for(k=0;k<n;k++)
				{
					if(g[j][k]==1)
					{
						g[j][k] = 0;
						indeg[k] = indeg[k]-1;
					}
				}
			}
		}
	}
	
	return 0;
}

2.
#include<stdio.h>
#include<stdlib.h>
 
int board[20],count;
 
void queen(int row,int n);

int main()
{
    int n,i,j;  
 
    printf(" - N Queens Problem Using Backtracking -");
    printf("\n\nEnter number of Queens:");
    scanf("%d",&n);

    queen(1,n);

    return 0;
}
 
//function for printing the solution
void print(int n)
{
    int i,j;
    printf("\n\nSolution %d:\n\n",++count);
    
    for(i=1;i<=n;++i)
    {
        printf("\t%d",i);
    }

    for(i=1;i<=n;i++)
    {
        printf("\n\n%d",i);
        for(j=1;j<=n;j++) 
        {
            if(board[i]==j)
            {
                printf("\t Q"); 
            }
            else
            {
                printf("\t -"); 
            }
        }
    }
}
 
int place(int row,int column)
{
    int i;
    for(i=1;i<=row-1;i++)
    {
        if(board[i]==column)
            return 0;
        else if(abs(board[i]-column)==abs(i-row))
            return 0;
    }
    
    return 1;
}
 
//function to check for proper positioning of queen
void queen(int row,int n)
{
    int column;
    for(column=1;column<=n;column++)
    {
        if(place(row,column))
        {
            board[row]=column; 
            
            if(row==n) 
                print(n); 
            else 
                queen(row+1,n);
        }
    }
}