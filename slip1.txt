1.#include<stdio.h>

void generate(int arr[],int n)
{
     int i;
     
     srand(time(0));
     
     for(i=0;i<n;i++)
     {
           arr[i] = rand()%100;
     }
}

void display(int arr[],int n)
{
     int i;
     
     for(i=0;i<n;i++)
     {
           printf(" %d ",arr[i]);
     }
}

void selection_sort(int arr[],int n)
{
     int i,j,minval,minpos,temp;
     
     for(i=0;i<n-1;i++)
     {
           minval = arr[i];
           minpos = i;
           
           for(j=i+1;j<n;j++)
           {
                 if(arr[j]<minval)
                 {
                       minval = arr[j];
                       minpos = j;
                 }
           }
           
           temp = arr[i];
           arr[i] = arr[minpos];
           arr[minpos] = temp;
           
           printf("\n\n After %d pass : ",i);
           display(arr,n);
     }
}

int main()
{
    int arr[100],n;
    
    printf("\n Enter Array Size : ");
    scanf("%d",&n);
    
    generate(arr,n);
    
    printf("\n\n Before Sorting : ");
    display(arr,n);
    
    selection_sort(arr,n);
    
    printf("\n\n After Sorting : ");
    display(arr,n);
    
    getch();
    
    return 0;
}
2.
#include<stdio.h>

void accept(int[],int);
void display(int[],int);

void quicksort(int[],int,int);
int partition(int[],int,int);

int main()
{
	int arr[100],n;

	printf("\n Enter limit : ");
	scanf("%d",&n);

	accept(arr,n);

	printf("\n\n Before Sorting : ");
	display(arr,n);

	quicksort(arr, 0 , n-1);

	printf("\n\n After Sorting : ");
	display(arr,n);

	getch();	
   return 0;
}

void accept(int arr[],int n)
{
	int i;

	printf("\n Enter %d elements : ",n);

	for(i=0;i<n;i++)
	{
		scanf("%d",&arr[i]);
	}
}

void display(int arr[],int n)
{
	int i;

	for(i=0;i<n;i++)
	{
		printf(" %d ",arr[i]);
	}
}

void quicksort(int arr[],int d,int u)
{
	int m;

	if(d < u)
	{
		m=partition(arr,d,u);
		quicksort(arr,d,m-1);
		quicksort(arr,m+1,u);
	}
}

int partition(int arr[],int d,int u)
{
	int temp,p;
	p = d;
	d++;

	while(d <= u)
	{
		while(arr[p] >= arr[d] && d<=u)
		{
			d++;
		}

		while(arr[p] <= arr[u] && d<=u)
		{
			u--;
		}

		if(d <= u)
		{
			temp=arr[d];
			arr[d]=arr[u];
			arr[u]=temp;
		}
		else
		{
			temp=arr[u];
			arr[u]=arr[p];
			arr[p]=temp;
		}
	}

	return(u);
}

