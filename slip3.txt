1.
#include<stdio.h>

void accept(int[],int);
void display(int[],int);

void quicksort(int[],int,int);
int partition(int[],int,int);

int main()
{
	int arr[100],n;

	printf("\n Enter limit : ");
	scanf("%d",&n);

	accept(arr,n);

	printf("\n\n Before Sorting : ");
	display(arr,n);

	quicksort(arr, 0 , n-1);

	printf("\n\n After Sorting : ");
	display(arr,n);

	getch();	
   return 0;
}

void accept(int arr[],int n)
{
	int i;

	printf("\n Enter %d elements : ",n);

	for(i=0;i<n;i++)
	{
		scanf("%d",&arr[i]);
	}
}

void display(int arr[],int n)
{
	int i;

	for(i=0;i<n;i++)
	{
		printf(" %d ",arr[i]);
	}
}

void quicksort(int arr[],int d,int u)
{
	int m;

	if(d < u)
	{
		m=partition(arr,d,u);
		quicksort(arr,d,m-1);
		quicksort(arr,m+1,u);
	}
}

int partition(int arr[],int d,int u)
{
	int temp,p;
	p = d;
	d++;

	while(d <= u)
	{
		while(arr[p] >= arr[d] && d<=u)
		{
			d++;
		}

		while(arr[p] <= arr[u] && d<=u)
		{
			u--;
		}

		if(d <= u)
		{
			temp=arr[d];
			arr[d]=arr[u];
			arr[u]=temp;
		}
		else
		{
			temp=arr[u];
			arr[u]=arr[p];
			arr[p]=temp;
		}
	}

	return(u);
}
2.
#include <stdio.h>

int inf = 9999;
int k, a, b, u, v, ne=1, min_val;
int mincost = 0;

char area[][6] = {"A","B","C","D","E","F"}; 
int visited[6] = {0};

void prim_MST(int cost[][6], int n)
{
    int i,j;
    
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(cost[i][j]==0)
            {
			    cost[i][j]=inf;
            }
		}
	}
    
	visited[0]=1;
    mincost=0;

	for(ne=1;ne<n;ne++) 
	{
        min_val=inf;
		for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                if(visited[i]!=0 && visited[j]==0)
                {
                    if(cost[i][j] < min_val)                                                              
                    {
                        min_val=cost[i][j];
                        u=i; 
                        v=j;
                    }
                }
            }
        }

		printf("\n Edge %d : %s - %s cost : %d",ne,area[u],area[v],min_val);

 		mincost=mincost+min_val;
 		visited[v]=1;
		cost[u][v] = cost[v][u] = inf;
	}

	printf("\n Minimun cost accordingly Prim's Algorithm = %d",mincost);
}

int main()
{
    int i,j,n=6;
    
    int cost[6][6] = {  {0,3,4,0,0,0}, 
                        {3,0,2,4,2,0}, 
                        {4,2,0,0,5,0}, 
                        {0,4,0,0,3,2}, 
                        {0,2,5,3,0,3}, 
                        {0,0,0,2,3,0}   };  

    prim_MST(cost, n);

    return 0;
}

