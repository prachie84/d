1.
#include <stdio.h>

int visited[10] = {0};
int queue[10], front = 0, rear = 0;

void bfs(int g[10][10], int n, int start)
{
    int i;
    
    visited[start] = 1;
    queue[rear++] = start;

    while (front < rear)
    {
        int current = queue[front++];
        printf("%d\t", current);

        for (i = 0; i < n; i++)
        {
            if (g[current][i]==1 && visited[i]==0)
            {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }
    }
}

int main()
{
    int g[10][10], n, i, j, start;

    printf("\nEnter the number of nodes: ");
    scanf("%d", &n);

    printf("\nEnter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%d", &g[i][j]);
        }
    }

    printf("\nEnter the starting node (0 to %d): ", n - 1);
    scanf("%d", &start);

    printf("\nBFS traversal: ");
    bfs(g, n, start);

    return 0;
}

2.
#include<stdio.h>

void generate(int arr[],int n)
{
     int i;
     
     srand(time(0));
     
     for(i=0;i<n;i++)
     {
           arr[i] = rand()%100;
     }
}

void display(int arr[],int n)
{
     int i;
     
     for(i=0;i<n;i++)
     {
           printf(" %d ",arr[i]);
     }
}

void selection_sort(int arr[],int n)
{
     int i,j,minval,minpos,temp;
     
     for(i=0;i<n-1;i++)
     {
           minval = arr[i];
           minpos = i;
           
           for(j=i+1;j<n;j++)
           {
                 if(arr[j]<minval)
                 {
                       minval = arr[j];
                       minpos = j;
                 }
           }
           
           temp = arr[i];
           arr[i] = arr[minpos];
           arr[minpos] = temp;
           
           printf("\n\n After %d pass : ",i);
           display(arr,n);
     }
}

int main()
{
    int arr[100],n;
    
    printf("\n Enter Array Size : ");
    scanf("%d",&n);
    
    generate(arr,n);
    
    printf("\n\n Before Sorting : ");
    display(arr,n);
    
    selection_sort(arr,n);
    
    printf("\n\n After Sorting : ");
    display(arr,n);
    
    getch();
    
    return 0;
}
