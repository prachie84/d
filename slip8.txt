1.
#include <stdio.h>

// Structure to represent an item
struct Item 
{
    int value;
    int weight;
};

void sortItems(struct Item arr[], int n) 
{
    int i,j;
    struct Item temp;
    double r1,r2;

    for (i=1; i<n; i++) 
    {
        for (j=0; j<n-i; j++) 
        {
            r1 = (double)arr[j].value / arr[j].weight;
            r2 = (double)arr[j+1].value / arr[j+1].weight;

            if (r1 < r2) 
            {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

double fractionalKnapsack(int wt, struct Item arr[], int n) 
{
    int curWeight = 0, remain, i;
    double finalValue = 0.0;

    sortItems(arr, n);

    for (i=0; i<n; i++) 
    {
        if (curWeight + arr[i].weight <= wt) 
        {
            curWeight += arr[i].weight;
            finalValue += arr[i].value;
        } 
        else 
        {
            remain = wt - curWeight;
            finalValue += arr[i].value * ((double) remain / arr[i].weight);
            break;
        }
    }

    return finalValue;
}

int main() 
{
    int wt,n,i;
    struct Item arr[100];

	printf("\n Enter Knapsack Size : ");
	scanf("%d",&wt);

	printf("\n Enter No. of Items : ");
	scanf("%d",&n);

	printf("\n Enter %d Item Details : ",n);
	for(i=0;i<n;i++)
	{
		printf("\n Enter Value & Weight : ");
		scanf("%d%d",&arr[i].value,&arr[i].weight);
	}

    printf("\n Maximum value in Knapsack = %.2f\n", fractionalKnapsack(wt, arr, n));
    
    return 0;
}
2.
#include <stdio.h>

#define MAX 10

int distance[MAX][MAX];
int visited[MAX] = {0};

// Function to calculate the nearest unvisited city from the current city
int nearestNeighbor(int currentCity, int n) 
{
    int minDist = 9999, i;
    int nearestCity = -1;

    for (i=0; i<n; i++) 
    {
        if (!visited[i] && distance[currentCity][i] < minDist) 
        {
            minDist = distance[currentCity][i];
            nearestCity = i;
        }
    }

    return nearestCity;
}

// Function to solve TSP using the Nearest Neighbor Algorithm
void tspNearestNeighbor(int n, int startCity) 
{
    int totalDistance = 0;
    int currentCity = startCity;
    int nextCity, i;

    printf("\n TSP path: %d -> ", currentCity);
    visited[currentCity] = 1;

    for (i=1; i<n; i++) 
    {
        nextCity = nearestNeighbor(currentCity, n);
        printf("%d -> ", nextCity);
        totalDistance += distance[currentCity][nextCity];
        visited[nextCity] = 1;
        currentCity = nextCity;
    }

    // Return to the starting city
    totalDistance += distance[currentCity][startCity];
    printf("%d\n", startCity);

    printf("\n Total Distance : %d", totalDistance);
}

int main() 
{
    int n,i,j;

    printf("\n Enter the number of cities : ");
    scanf("%d",&n);

    printf("\n Enter the distance matrix : ");
    for (i=0; i<n; i++) 
    {
        for (j=0; j<n; j++) 
        {
            scanf("%d",&distance[i][j]);
        }
    }

    tspNearestNeighbor(n, 0);

    return 0;
}
